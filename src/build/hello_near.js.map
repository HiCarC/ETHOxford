{"version":3,"file":"hello_near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/promise.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A function call weight raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeightRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeightRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCallRaw(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCallRaw(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a function call weight raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeightRaw(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeightRaw(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the receiver.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","// Find all our documentation at https://docs.near.org\nimport { NearBindgen, near, call, view, initialize, NearPromise } from 'near-sdk-js';\nimport { AccountId } from \"near-sdk-js/lib/types\";\n\nconst FIVE_TGAS = BigInt(\"50000000000000\");\nconst NO_DEPOSIT = BigInt(0);\nconst NO_ARGS = JSON.stringify({});\n\n@NearBindgen({})\nclass Patient {\n  ho_account: AccountId = \"hello-nearverse.testnet\";\n\n  @initialize({})\n  init({ ho_account }: { ho_account: AccountId }) {\n    this.ho_account = ho_account\n  }\n\n  @call({})\n  query_hospital_model_url(): NearPromise {\n    const promise = NearPromise.new(this.ho_account)\n    .functionCall(\"get_model_url\", NO_ARGS, NO_DEPOSIT, FIVE_TGAS)\n    \n    return promise.asReturn();\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","assert","expression","message","Error","serialize","valueToSerialize","encode","JSON","stringify","key","value","toString","BIGINT","Date","toISOString","DATE","deserialize","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageWriteRaw","storage_write","inputRaw","input","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCallRaw","methodName","args","amount","gas","promise_batch_action_function_call","promiseBatchActionFunctionCall","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeightRaw","weight","promise_batch_action_function_call_weight","promiseBatchActionFunctionCallWeight","promiseReturn","promise_return","initialize","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","near","apply","NearBindgen","requireInit","serializer","deserializer","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","reconstructor","constructor","reconstruct","_requireInit","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallRaw","FunctionCallWeight","FunctionCallWeightRaw","Transfer","Stake","data","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","forEach","action","PromiseJoint","promiseA","promiseB","result","NearPromise","subtype","shouldReturn","new","addAction","push","createAccount","deployContract","functionCall","functionCallRaw","functionCallWeight","functionCallWeightRaw","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","FIVE_TGAS","NO_DEPOSIT","NO_ARGS","Patient","_dec","_dec2","_dec3","_class","_class2","ho_account","init","query_hospital_model_url","promise","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","undefined","name","value_return"],"mappings":"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"}